#include "imports/stdlib.fc";
#include "common/utils.fc";
#include "common/messages.fc";
#include "common/address.fc";
#include "common/errors.fc";
#include "batch_tick/constants.fc";
#include "batch_tick/errors.fc";
#include "batch_tick/opcodes.fc";
#include "batch_tick/storage.fc";
#include "batch_tick/utils.fc";
#include "batch_tick/structs.fc";
#include "libraries/tick.fc";
#include "libraries/tick_math.fc";
#include "libraries/swap_math.fc";
#include "pool/opcodes.fc";
#include "pool/structs.fc";

() handle_internal_swap(
  int query_id,
  int amount_specified,
  int sqrt_price_limit_x96,
  int liquidity,
  int tick,
  int fee,
  int zero_for_one,
  int sqrt_price_x96,
  int fee_growth_global0_x128,
  int fee_growth_global1_x128,
  int cache::liquidity_start,
  int cache::fee_protocol,
  int state::amount_specified_remaining,
  int state::amount_calculated,
  int state::sqrt_price_x96,
  int state::tick,
  int state::fee_growth_global_x128,
  int state::protocol_fee,
  int state::liquidity,
  slice response_address
) {
  int current_batch_index = calculate_batch_tick_index(state::tick, storage::tick_spacing);
  while ((state::amount_specified_remaining != 0) & (state::sqrt_price_x96 != sqrt_price_limit_x96)) {
    ;; init step
    int step::sqrt_price_start_x96 = state::sqrt_price_x96;
    int step::amount_in = 0;
    int step::amount_out = 0;
    int step::fee_amount = 0;
    
    (int step::next_tick, slice tick_value, int step::existed) = storage::ticks.batch_tick::find_next_tick(state::tick, zero_for_one);
    int move_up_on_tick = zero_for_one ? 0 : -1;

    (int tick_next, int batch_index_next, int is_jump) = batch_tick::recalculate_next_tick(step::next_tick, storage::tick_spacing, step::existed, zero_for_one);

    if (is_jump) {
      slice next_batch_tick_address = get_batch_tick_address(batch_index_next,
      storage::tick_spacing, storage::pool_address, storage::batch_tick_code);
      cell cache = batch_tick::pack_cache(cache::liquidity_start, cache::fee_protocol);
      cell state = batch_tick::pack_state(state::amount_specified_remaining, state::amount_calculated, state::sqrt_price_x96, state::tick, state::fee_growth_global_x128, state::protocol_fee, state::liquidity);

      cell packed_data = batch_tick::pack_cross_swap(
                    current_batch_index,
                    zero_for_one,
                    amount_specified,
                    liquidity,
                    tick,
                    sqrt_price_x96,
                    sqrt_price_limit_x96,
                    fee,
                    fee_growth_global0_x128,
                    fee_growth_global1_x128,
                    cache,
                    state,
                    response_address);
      builder msg = begin_cell()
                      .store_uint(op::cross_swap, 32)
                      .store_uint(query_id, 64)
                      .store_ref(packed_data);
      send_simple_message(0, next_batch_tick_address, msg.end_cell(), CARRY_REMAINING_GAS);
      return ();
    }

    int step::sqrt_price_next_x96 = tick_math::get_sqrt_ratio_at_tick(step::next_tick);
    int sqrt_price_target_x96 = zero_for_one ? step::sqrt_price_next_x96 < sqrt_price_limit_x96 : step::sqrt_price_next_x96 > sqrt_price_limit_x96 ? sqrt_price_limit_x96 : step::sqrt_price_next_x96;
    (state::sqrt_price_x96, step::amount_in, step::amount_out, step::fee_amount) = swap_math::compute_swap_step(state::sqrt_price_x96, sqrt_price_target_x96, state::liquidity, state::amount_specified_remaining, fee);

    state::amount_specified_remaining -= (step::amount_in + step::fee_amount);
    state::amount_calculated += step::amount_out - step::amount_out;

    if (cache::fee_protocol > 0) {
      int delta = step::fee_amount / cache::fee_protocol;
      step::fee_amount -= delta;
      state::protocol_fee += delta;
    }

    if (state::liquidity > 0) {
      state::fee_growth_global_x128 += full_math::mul_div(step::fee_amount, fixed_point_128::q128, state::liquidity);
    }

    if (state::sqrt_price_x96 == step::sqrt_price_next_x96) {
      if (step::existed != -1) {
        int cross_fee_growth_global_0_x128 = zero_for_one ? state::fee_growth_global_x128 : fee_growth_global0_x128;
        int cross_fee_growth_global_1_x128 = zero_for_one ? fee_growth_global1_x128 : state::fee_growth_global_x128;
        int liquidity_net = storage::ticks~tick::cross(
                              step::next_tick, 
                              cross_fee_growth_global_0_x128,
                              cross_fee_growth_global_1_x128);
        if (zero_for_one) {
          liquidity_net = 0 - liquidity_net;
        }

        state::liquidity = liquidity_math::add_delta(state::liquidity, liquidity_net);
      }
      state::tick = zero_for_one ? step::next_tick - 1 : step::next_tick;
    }

    if (state::sqrt_price_x96 != step::sqrt_price_start_x96) {
      state::tick = tick_math::get_tick_at_sqrt_ratio(state::sqrt_price_x96);
    }
  }

  ;; call back to pool to update pool and
  if (state::tick != tick) {
    sqrt_price_x96 = state::sqrt_price_x96;
    tick = state::tick;
  } else {
    sqrt_price_x96 = state::sqrt_price_x96;
  }

  if (cache::liquidity_start != state::liquidity) {
    liquidity = state::liquidity;
  }

  if (zero_for_one) {
    fee_growth_global0_x128 = state::fee_growth_global_x128;
  } else {
    fee_growth_global1_x128 = state::fee_growth_global_x128;
  }

  (int amount0, int amount1) = (amount_specified - state::amount_specified_remaining, state::amount_calculated);

  builder msg = begin_cell()
                  .store_uint(op::cb_swap, 32)
                  .store_uint(query_id, 64)
                  .store_ref(
                    pack_cb_swap(
                      storage::batch_index,
                      tick,
                      sqrt_price_x96,
                      liquidity,
                      fee_growth_global0_x128,
                      fee_growth_global1_x128,
                      zero_for_one,
                      state::protocol_fee,
                      amount0,
                      amount1,
                      response_address)
                  );
  send_simple_message(0, storage::pool_address, msg.end_cell(), CARRY_REMAINING_GAS);
  save_data();
  return ();
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore all empty messages        
    return ();
  }

  slice cs = in_msg_full.begin_parse();
   
  int flags = cs~load_uint(4);

  if (flags & 1) { ;; ignore all bounced messages
    return ();
  }

  load_data(); ;; here we populate the storage variables

  slice sender_address = cs~load_msg_addr();
  int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
  int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

  if (op == op::update_tick_lower) {
    throw_unless(error::unauthorized, compare_address(sender_address, storage::pool_address));
    int tick_lower = in_msg_body~load_int(24);
    int tick_upper = in_msg_body~load_int(24);
    int lower_range = storage::batch_index * storage::tick_spacing * constants::batch_index_range;
    int upper_range = (storage::batch_index + 1) * storage::tick_spacing * constants::batch_index_range - 1;
    throw_unless(error::wrong_range_batch_tick, (tick_lower <= tick_upper) & (tick_lower >= lower_range) & (tick_lower <= upper_range));
    int current_tick = in_msg_body~load_int(24);
    int liquidity_delta = in_msg_body~load_uint(128);
    int fee_growth_global_0X128 = in_msg_body~load_uint(256);
    int fee_growth_global_1X128 = in_msg_body~load_uint(256);
    int upper = in_msg_body~load_int(2);
    throw_unless(error::wrong_upper, upper == 0);
    int max_liquidity = in_msg_body~load_uint(128);
    slice recipient = in_msg_body~load_ref().begin_parse();
    int flipped_lower = storage::ticks~tick::update(tick_lower, current_tick, liquidity_delta, fee_growth_global_0X128, fee_growth_global_1X128, upper, max_liquidity);
    (int fee_growth_below_0X128, int fee_growth_below_1X128) = storage::ticks.tick::get_fee_growth_below(tick_lower, current_tick,  fee_growth_global_0X128,
      fee_growth_global_1X128);
    if (tick_upper > upper_range) {
      int upper_batch_tick_index = calculate_batch_tick_index(tick_upper, storage::tick_spacing);
      (cell state_init, slice upper_batch_tick_address) = get_batch_tick_state_init_and_address(upper_batch_tick_index, storage::tick_spacing, storage::pool_address, storage::batch_tick_code);
      builder msg = begin_cell()
                      .store_uint(op::update_tick_upper, 32)
                      .store_uint(query_id, 64)
                      .store_int(flipped_lower, 2)
                      .store_int(tick_lower, 24)
                      .store_int(tick_upper, 24)
                      .store_int(current_tick, 24)
                      .store_uint(liquidity_delta, 128)
                      .store_uint(fee_growth_global_0X128, 256)
                      .store_uint(fee_growth_global_1X128, 256)
                      .store_int(-1, 2) ;; true
                      .store_uint(max_liquidity, 128)
                      .store_ref(begin_cell()
                            .store_uint(fee_growth_below_0X128, 256)
                            .store_uint(fee_growth_below_1X128, 256)
                            .store_slice(recipient)
                          .end_cell()
      );
      send_message_with_stateinit(0, upper_batch_tick_address, state_init, msg.end_cell(), CARRY_REMAINING_GAS);
    } else {
      int flipped_upper = storage::ticks~tick::update(tick_upper, current_tick, liquidity_delta, fee_growth_global_0X128, fee_growth_global_1X128, upper, max_liquidity);
      (int fee_growth_above_0X128, int fee_growth_above_1X128) = storage::ticks.tick::get_fee_growth_above(
        tick_upper,
        current_tick,
        fee_growth_global_0X128,
        fee_growth_global_1X128 
      );
        (int fee_growth_inside_0X128, int fee_growth_inside_1X128) = tick::get_fee_growth_inside(
        fee_growth_global_0X128,
        fee_growth_global_1X128,
        fee_growth_below_0X128,
        fee_growth_below_1X128,
        fee_growth_above_0X128,
        fee_growth_above_1X128
      );
      builder msg = begin_cell()
                    .store_uint(op::cb_update_fee_growth_inside, 32)
                    .store_uint(query_id, 64)
                    .store_ref(
                      begin_cell()
                          .store_int(storage::batch_index, 16)
                          .store_uint(liquidity_delta, 128)
                          .store_int(tick_lower, 24)
                          .store_int(flipped_lower, 2)
                          .store_int(tick_upper, 24)
                          .store_int(flipped_upper, 2)
                          .store_uint(fee_growth_inside_0X128, 256)
                          .store_uint(fee_growth_inside_1X128, 256)
                          .store_slice(recipient)
                        .end_cell()
                    );
      send_simple_message(0, storage::pool_address, msg.end_cell(), CARRY_REMAINING_GAS);
      if (liquidity_delta < 0 & flipped_upper) {
        storage::ticks~idict_delete?(24, tick_upper);
      }
    }
    if (liquidity_delta < 0 & flipped_lower) {
      storage::ticks~idict_delete?(24, tick_lower);
    }
    save_data();
    return ();
  }

  if (op == op::update_tick_upper) {
    int prev_batch_tick_index = storage::batch_index - 1;
    slice prev_batch_tick_address = get_batch_tick_address(prev_batch_tick_index, storage::tick_spacing, storage::pool_address, storage::batch_tick_code);
    throw_unless(error::unauthorized, compare_address(sender_address, prev_batch_tick_address));
    int flipped_lower = in_msg_body~load_int(2);
    int tick_lower = in_msg_body~load_int(24);
    int tick_upper = in_msg_body~load_int(24);
    int tick = in_msg_body~load_int(24);
    int lower_range = storage::batch_index * storage::tick_spacing * constants::batch_index_range;
    int upper_range = (storage::batch_index + 1) * storage::tick_spacing * constants::batch_index_range - 1;
    throw_unless(error::wrong_range_batch_tick, (tick_upper >= lower_range) & (tick_upper <= upper_range));
    int liquidity_delta = in_msg_body~load_uint(128);
    int fee_growth_global_0X128 = in_msg_body~load_uint(256);
    int fee_growth_global_1X128 = in_msg_body~load_uint(256);
    int upper = in_msg_body~load_int(2);
    throw_unless(error::wrong_upper, upper == -1);
    int max_liquidity = in_msg_body~load_uint(128);
    slice fee_lower_info_cs = in_msg_body~load_ref().begin_parse();
    (int fee_growth_below_0X128, int fee_growth_below_1X128) = (fee_lower_info_cs~load_uint(256), fee_lower_info_cs~load_uint(256));
    slice recipient = fee_lower_info_cs~load_msg_addr();
    (int fee_growth_above_0X128, int fee_growth_above_1X128) = storage::ticks.tick::get_fee_growth_above(
      tick_upper,
      tick,
      fee_growth_global_0X128,
      fee_growth_global_1X128 
    );
    (int fee_growth_inside_0X128, int fee_growth_inside_1X128) = tick::get_fee_growth_inside(
      fee_growth_global_0X128,
      fee_growth_global_1X128,
      fee_growth_below_0X128,
      fee_growth_below_1X128,
      fee_growth_above_0X128,
      fee_growth_above_1X128
    );
    int flipped_upper = storage::ticks~tick::update(tick_upper, tick, liquidity_delta, fee_growth_global_0X128, fee_growth_global_1X128, upper, max_liquidity);
    builder msg = begin_cell()
                    .store_uint(op::cb_update_fee_growth_inside, 32)
                    .store_uint(query_id, 64)
                    .store_ref(
                      begin_cell()
                          .store_int(storage::batch_index, 16)
                          .store_uint(liquidity_delta, 128)
                          .store_int(tick_lower, 24)
                          .store_int(flipped_lower, 2)
                          .store_int(tick_upper, 24)
                          .store_int(flipped_upper, 2)
                          .store_uint(fee_growth_inside_0X128, 256)
                          .store_uint(fee_growth_inside_1X128, 256)
                          .store_slice(recipient)
                        .end_cell()
                    );
    send_simple_message(0, storage::pool_address, msg.end_cell(), CARRY_REMAINING_GAS);
    if (liquidity_delta < 0 & flipped_upper) {
      storage::ticks~idict_delete?(24, tick_upper);
    }
    save_data();
    return ();
  }

  if (op == op::internal_swap) {
    throw_unless(error::unauthorized, compare_address(sender_address, storage::pool_address));
    slice first_ref = in_msg_body~load_ref().begin_parse();
    slice second_ref = in_msg_body~load_ref().begin_parse();
    (int amount_specified, int fee_protocol, int sqrt_price_limit_x96, int fee_growth_global0_x128, int fee_growth_global1_x128, int liquidity, int tick, int fee, int zero_for_one, int sqrt_price_x96, slice response_address) = (
      first_ref~load_int(256),
      first_ref~load_uint(8),
      first_ref~load_uint(160),
      first_ref~load_uint(256),
      first_ref~load_uint(256),
      second_ref~load_uint(128),
      second_ref~load_int(24),
      second_ref~load_uint(24),
      second_ref~load_int(2),
      second_ref~load_uint(160),
      second_ref~load_msg_addr()
    );

    ;; init cache
    int cache::liquidity_start = liquidity; ;; u128
    int cache::fee_protocol = zero_for_one ? (fee_protocol % 16) : (fee_protocol >> 4); ;; u8

    ;; init state
    int state::amount_specified_remaining = amount_specified; ;; i256
    int state::amount_calculated = 0; ;; i256
    int state::sqrt_price_x96 = sqrt_price_x96; ;; u160
    int state::tick = tick; ;;  i24
    int state::fee_growth_global_x128 = zero_for_one ? fee_growth_global0_x128 : fee_growth_global1_x128; ;; u256
    int state::protocol_fee = 0; ;; u128
    int state::liquidity = cache::liquidity_start; ;; u128
    
    handle_internal_swap(
      query_id,
      amount_specified,
      sqrt_price_limit_x96,
      liquidity,
      tick,
      fee,
      zero_for_one,
      sqrt_price_x96,
      fee_growth_global0_x128,
      fee_growth_global1_x128,
      cache::liquidity_start,
      cache::fee_protocol,
      state::amount_specified_remaining,
      state::amount_calculated,
      state::sqrt_price_x96,
      state::tick,
      state::fee_growth_global_x128,
      state::protocol_fee,
      state::liquidity,
      response_address
      );
    return ();
  }

  if (op == op::cross_swap) {
    slice ds = in_msg_body~load_ref().begin_parse();
    (int batch_index, int zero_for_one, int amount_specified, int liquidity, int tick, int sqrt_price_x96, int sqrt_price_limit_x96, int fee, int fee_growth_global0_x128, int fee_growth_global1_x128, cell cache, cell state, slice response_address) = batch_tick::unpack_cross_swap(ds);
    (int cache::liquidity_start, int cache::fee_protocol) = batch_tick::unpack_cache(cache.begin_parse());
    (int state::amount_specified_remaining, int state::amount_calculated, int state::sqrt_price_x96, int state::tick, int state::fee_growth_global_x128, int state::protocol_fee, int state::liquidity) = batch_tick::unpack_state(state.begin_parse());
    handle_internal_swap(
      query_id,
      amount_specified,
      sqrt_price_limit_x96,
      liquidity,
      tick,
      fee,
      zero_for_one,
      sqrt_price_x96,
      fee_growth_global0_x128,
      fee_growth_global1_x128,
      cache::liquidity_start,
      cache::fee_protocol,
      state::amount_specified_remaining,
      state::amount_calculated,
      state::sqrt_price_x96,
      state::tick,
      state::fee_growth_global_x128,
      state::protocol_fee,
      state::liquidity,
      response_address
    );
    save_data();
    return ();
  }

  throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

slice get_tick(
    int tick
) method_id {
    load_data();
    (slice tick, int exist) = storage::ticks.idict_get?(24,tick);
    if (exist){
        return tick;
    } 
    return begin_cell()
            .store_int(0, 128)
            .store_int(0, 128)
            .store_uint(0, 256)
            .store_uint(0, 256)
            .store_int(0, 1)
            .end_cell().begin_parse();
}