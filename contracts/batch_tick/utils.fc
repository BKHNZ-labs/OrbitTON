cell pack_batch_tick_code(int batch_index, int tick_spacing, slice pool_address, cell ticks, cell batch_tick_code) inline {
  return begin_cell()
    .store_int(batch_index, 16)
    .store_int(tick_spacing, 24)
    .store_slice(pool_address)
    .store_dict(ticks)
    .store_ref(batch_tick_code)
  .end_cell();
}

cell calculate_batch_tick_state_init(int batch_index, int tick_spacing, slice pool_address, cell ticks, cell batch_tick_code) inline {
  return begin_cell()
    .store_uint(0, 2)
    .store_dict(batch_tick_code)
    .store_dict(pack_batch_tick_code(batch_index, tick_spacing, pool_address, ticks, batch_tick_code))
    .store_uint(0, 1)
  .end_cell();
}

slice calculate_batch_tick_address(cell state_init) inline {
  return begin_cell().store_uint(4, 3)
    .store_int(WORKCHAIN, 8)
    .store_uint(cell_hash(state_init), 256)
  .end_cell().begin_parse();
}

(cell, slice) get_batch_tick_state_init_and_address(int batch_index, int tick_spacing, slice pool_address, cell batch_tick_code) inline {
  cell state_init = calculate_batch_tick_state_init(batch_index, tick_spacing, pool_address, new_dict(), batch_tick_code);
  return (state_init, calculate_batch_tick_address(state_init));
}

slice get_batch_tick_address(int batch_index, int tick_spacing, slice pool_address, cell batch_tick_code) inline {
  cell state_init = calculate_batch_tick_state_init(batch_index, tick_spacing, pool_address, new_dict(), batch_tick_code);
  return calculate_batch_tick_address(state_init);
}


int calculate_batch_tick_index(int tick, int tick_spacing){
  if(tick < 0){
    return tick ^/ (constants::batch_index_range * tick_spacing);
  }
  return tick / (constants::batch_index_range * tick_spacing);
}