#include "../libraries/tick.fc";

cell pack_batch_tick_code(int batch_index, int tick_spacing, slice pool_address, cell ticks, cell batch_tick_code) inline {
  return begin_cell()
    .store_int(batch_index, 16)
    .store_int(tick_spacing, 24)
    .store_slice(pool_address)
    .store_dict(ticks)
    .store_ref(batch_tick_code)
  .end_cell();
}

cell calculate_batch_tick_state_init(int batch_index, int tick_spacing, slice pool_address, cell ticks, cell batch_tick_code) inline {
  return begin_cell()
    .store_uint(0, 2)
    .store_dict(batch_tick_code)
    .store_dict(pack_batch_tick_code(batch_index, tick_spacing, pool_address, ticks, batch_tick_code))
    .store_uint(0, 1)
  .end_cell();
}

slice calculate_batch_tick_address(cell state_init) inline {
  return begin_cell().store_uint(4, 3)
    .store_int(WORKCHAIN, 8)
    .store_uint(cell_hash(state_init), 256)
  .end_cell().begin_parse();
}

(cell, slice) get_batch_tick_state_init_and_address(int batch_index, int tick_spacing, slice pool_address, cell batch_tick_code) inline {
  cell state_init = calculate_batch_tick_state_init(batch_index, tick_spacing, pool_address, new_dict(), batch_tick_code);
  return (state_init, calculate_batch_tick_address(state_init));
}

slice get_batch_tick_address(int batch_index, int tick_spacing, slice pool_address, cell batch_tick_code) inline {
  cell state_init = calculate_batch_tick_state_init(batch_index, tick_spacing, pool_address, new_dict(), batch_tick_code);
  return calculate_batch_tick_address(state_init);
}

int calculate_batch_tick_index(int tick, int tick_spacing){
  if(constants::batch_index_range * tick_spacing > tick_math::MAX_TICK){
    if(tick < 0){
      return -1;
    }
    return 0;
  }
  if(tick < 0){
    return tick ^/ (constants::batch_index_range * tick_spacing);
  }
  return tick / (constants::batch_index_range * tick_spacing);
}

(int, slice, int) batch_tick::find_next_tick(cell ticks, int tick_index, int zero_for_one) {
  if (zero_for_one) {
    return ticks.idict_get_prev?(24, tick_index);
  }
  return ticks.idict_get_next?(24, tick_index);
}

;; return tick_next, batch_index_next, is_jump
(int, int, int) batch_tick::recalculate_next_tick(int next_tick, int tick_spacing, int existed, int zero_for_one) {
  int current_live_in_batch_index = calculate_batch_tick_index(next_tick, tick_spacing);
  int max_batch_index = calculate_batch_tick_index(tick_math::MAX_TICK, tick_spacing);
  int min_batch_index = calculate_batch_tick_index(tick_math::MIN_TICK,tick_spacing);
  
  if ((current_live_in_batch_index == max_batch_index) & (existed != -1) & (zero_for_one != -1)) {
    return (tick_math::MAX_TICK, current_live_in_batch_index, 0);
  }

  if ((current_live_in_batch_index == min_batch_index) & (existed != -1) & (zero_for_one == -1)) {
    return (tick_math::MIN_TICK, current_live_in_batch_index, 0);
  }

  if (zero_for_one & (existed != -1)) {
    return (0, current_live_in_batch_index - 1, -1);
  }

  if ((zero_for_one != -1) & (existed != -1)) {
    return (0, current_live_in_batch_index + 1, 1);
  }

  return (next_tick, current_live_in_batch_index, 0);
}

