#include "imports/stdlib.fc";
#include "pool/opcodes.fc";
#include "common/messages.fc";
#include "common/address.fc";
#include "common/errors.fc";

global slice router_address; ;; 267
global slice jetton0_wallet; ;; 267
global slice jetton1_wallet; ;; 267
global int fee; ;; 24 - uint
global int protocol_fee; ;; 8 - uint
global int sqrt_price_x96; ;; 160 - uint

global int tick_spacing; ;; 24
global int tick; ;; 24
global int fee_growth_global0_x128; ;; 256 - uint
global int fee_growth_global1_x128; ;; 256 - uint
global int collected_protocol_fee0; ;; 128 - uint
global int collected_protocol_fee1; ;; 128 - uint
global int liquidity; ;; 128 - uint

global int position_seqno; ;; 256 - uint
global cell tick_bitmap; 
global cell position_code;
global cell lp_account_code;
global cell batch_tick_code;

;; load_data populates storage variables using stored data
() load_data() impure {
  var ds = get_data().begin_parse();
  slice first_cell = ds~load_ref().begin_parse();
  router_address = first_cell~load_msg_addr();
  jetton0_wallet = first_cell~load_msg_addr();
  jetton1_wallet = first_cell~load_msg_addr();
  fee = first_cell~load_uint(24);
  protocol_fee = first_cell~load_uint(8);
  sqrt_price_x96 = first_cell~load_uint(160);

  slice second_cell = ds~load_ref().begin_parse();
  tick_spacing = second_cell~load_int(24);
  tick = second_cell~load_int(24);
  fee_growth_global0_x128 = second_cell~load_uint(256);
  fee_growth_global1_x128 = second_cell~load_uint(256);
  collected_protocol_fee0 = second_cell~load_uint(128);
  collected_protocol_fee1 = second_cell~load_uint(128);
  liquidity = second_cell~load_uint(128);

  slice third_cell = ds~load_ref().begin_parse();
  position_seqno = third_cell~load_uint(256);
  tick_bitmap = third_cell~load_ref();
  position_code = third_cell~load_ref();
  lp_account_code = third_cell~load_ref();
  batch_tick_code = third_cell~load_ref();
  ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure inline_ref {
  set_data(
    begin_cell()
      .store_ref(
      begin_cell()
          .store_slice(router_address)
          .store_slice(jetton0_wallet)
          .store_slice(jetton1_wallet)
          .store_uint(fee, 24)
          .store_uint(protocol_fee, 8)
          .store_uint(sqrt_price_x96, 160)
          .end_cell())
      .store_ref(
      begin_cell()
          .store_int(tick_spacing, 24)
          .store_int(tick, 24)
          .store_uint(fee_growth_global0_x128, 256)
          .store_uint(fee_growth_global1_x128, 256)
          .store_uint(collected_protocol_fee0, 128)
          .store_uint(collected_protocol_fee1, 128)
          .store_uint(liquidity, 128)
          .end_cell())
      .store_ref(
      begin_cell()
          .store_uint(position_seqno, 256)
          .store_ref(tick_bitmap)
          .store_ref(position_code)
          .store_ref(lp_account_code)
          .store_ref(batch_tick_code)
          .end_cell())
        .end_cell()
  );
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore all empty messages        
    return ();
  }

  slice cs = in_msg_full.begin_parse();
   
  int flags = cs~load_uint(4);

  if (flags & 1) { ;; ignore all bounced messages
    return ();
  }

  load_data(); ;; here we populate the storage variables

  slice sender_address = cs~load_msg_addr();
  int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
  int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

  throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

(int, int) get_collected_fees() method_id {
  load_data();
  return (collected_protocol_fee0, collected_protocol_fee1);
}
