#include "imports/stdlib.fc";
#include "libraries/sqrt_price_math.fc";
#include "libraries/tick_math.fc";
#include "common/messages.fc";
#include "common/address.fc";
#include "common/errors.fc";
#include "lp_account/opcodes.fc";
#include "router/opcodes.fc";
#include "pool/params.fc";
#include "pool/opcodes.fc";
#include "pool/lp_account-utils.fc";
#include "pool/router-utils.fc";
#include "pool/errors.fc";
#include "pool/constants.fc";
#include "batch_tick/constants.fc";
#include "batch_tick/opcodes.fc";
#include "batch_tick/utils.fc";


global slice router_address; ;; 267
global slice jetton0_wallet; ;; 267
global slice jetton1_wallet; ;; 267
global int fee; ;; 24 - uint
global int protocol_fee; ;; 8 - uint
global int sqrt_price_x96; ;; 160 - uint

global int tick_spacing; ;; 24
global int tick; ;; 24
global int fee_growth_global0_x128; ;; 256 - uint
global int fee_growth_global1_x128; ;; 256 - uint
global int collected_protocol_fee0; ;; 128 - uint
global int collected_protocol_fee1; ;; 128 - uint
global int liquidity; ;; 128 - uint

global int position_seqno; ;; 256 - uint
global cell tick_bitmap; 
global cell position_code;
global cell lp_account_code;
global cell batch_tick_code;

;; load_data populates storage variables using stored data
() load_data() impure {
  var ds = get_data().begin_parse();
  slice first_cell = ds~load_ref().begin_parse();
  router_address = first_cell~load_msg_addr();
  jetton0_wallet = first_cell~load_msg_addr();
  jetton1_wallet = first_cell~load_msg_addr();
  fee = first_cell~load_uint(24);
  protocol_fee = first_cell~load_uint(8);
  sqrt_price_x96 = first_cell~load_uint(160);

  slice second_cell = ds~load_ref().begin_parse();
  tick_spacing = second_cell~load_int(24);
  tick = second_cell~load_int(24);
  fee_growth_global0_x128 = second_cell~load_uint(256);
  fee_growth_global1_x128 = second_cell~load_uint(256);
  collected_protocol_fee0 = second_cell~load_uint(128);
  collected_protocol_fee1 = second_cell~load_uint(128);
  liquidity = second_cell~load_uint(128);

  slice third_cell = ds~load_ref().begin_parse();
  position_seqno = third_cell~load_uint(256);
  tick_bitmap = third_cell~load_ref();
  position_code = third_cell~load_ref();
  lp_account_code = third_cell~load_ref();
  batch_tick_code = third_cell~load_ref();
  ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure inline_ref {
  set_data(
    begin_cell()
      .store_ref(
      begin_cell()
          .store_slice(router_address)
          .store_slice(jetton0_wallet)
          .store_slice(jetton1_wallet)
          .store_uint(fee, 24)
          .store_uint(protocol_fee, 8)
          .store_uint(sqrt_price_x96, 160)
          .end_cell())
      .store_ref(
      begin_cell()
          .store_int(tick_spacing, 24)
          .store_int(tick, 24)
          .store_uint(fee_growth_global0_x128, 256)
          .store_uint(fee_growth_global1_x128, 256)
          .store_uint(collected_protocol_fee0, 128)
          .store_uint(collected_protocol_fee1, 128)
          .store_uint(liquidity, 128)
          .end_cell())
      .store_ref(
      begin_cell()
          .store_uint(position_seqno, 256)
          .store_ref(tick_bitmap)
          .store_ref(position_code)
          .store_ref(lp_account_code)
          .store_ref(batch_tick_code)
          .end_cell())
        .end_cell()
  );
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore all empty messages        
    return ();
  }

  slice cs = in_msg_full.begin_parse();
   
  int flags = cs~load_uint(4);

  if (flags & 1) { ;; ignore all bounced messages
    return ();
  }
  load_data(); ;; here we populate the storage variables

  slice sender_address = cs~load_msg_addr();
  int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
  int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
  
  if(op == op::mint){
    throw_unless(error::unauthorized, compare_address(sender_address, router_address));
    slice body = in_msg_body~load_ref().begin_parse();
    (int jetton_amount_0, int jetton_amount_1,  int tick_lower, int tick_upper, int liquidity_delta, slice recipient) = (body~load_coins(), body~load_coins(), body~load_int(24), body~load_int(24), body~load_int(128),  body~load_msg_addr());
    cell state_init = calculate_lp_account_state_init(recipient, my_address(), tick_lower, tick_upper, lp_account_code);
    slice to_lp_account_address = calculate_lp_account_address(state_init);
    
    builder body = begin_cell()
            .store_uint(op::add_liquidity, 32)
            .store_uint(query_id, 64)
            .store_coins(jetton_amount_0)
            .store_coins(jetton_amount_1)
            .store_int(liquidity_delta, 128);

    send_message_with_stateinit(0, to_lp_account_address, state_init, body.end_cell(), CARRY_REMAINING_GAS);
    return ();
  }

  if(op == op::cb_add_liquidity){
    slice body = in_msg_body~load_ref().begin_parse();
    (int jetton_0_amount, int jetton_1_amount, int tick_lower, int tick_upper, int liquidity_delta, slice recipient) = (body~load_coins(), body~load_coins(), body~load_int(24), body~load_int(24), body~load_int(128), body~load_msg_addr());
    slice lp_account = calculate_user_lp_account_address(recipient, my_address(), tick_lower,tick_upper,lp_account_code);
    throw_unless(error::unauthorized, compare_address(sender_address, lp_account));
    int amount0 = 0;
    int amount1 = 0;
  
    if(tick < tick_lower){
      amount0 = sqrt_price_math::get_amount0_delta_special(tick_math::get_sqrt_ratio_at_tick(tick_lower), tick_math::get_sqrt_ratio_at_tick(tick_upper), liquidity_delta);
    } 
    
    if(tick < tick_upper) {
      amount0 = sqrt_price_math::get_amount0_delta_special(sqrt_price_x96, tick_math::get_sqrt_ratio_at_tick(tick_upper), liquidity_delta);
      amount1 = sqrt_price_math::get_amount1_delta_special(
        tick_math::get_sqrt_ratio_at_tick(tick_lower),
        sqrt_price_x96,
        liquidity_delta
      );
    }

    if(tick_upper < tick){
      amount1 = sqrt_price_math::get_amount1_delta_special(tick_math::get_sqrt_ratio_at_tick(tick_lower), tick_math::get_sqrt_ratio_at_tick(tick_upper), liquidity_delta);
    }

    if((amount0 > jetton_0_amount) | (amount1 > jetton_1_amount) ){
      ;; refunds to user
      builder low_amount_body = build_pay_to_msg(query_id, recipient, error::LOW_AMOUNT,jetton0_wallet, jetton_0_amount, jetton1_wallet, jetton_1_amount, fee, tick_spacing); 
      send_simple_message(0, router_address, low_amount_body.end_cell(), CARRY_REMAINING_GAS);
      return ();
    } 

    const refund_amount0 = jetton_0_amount - amount0;
    const refund_amount1 = jetton_1_amount - amount1;
    builder refund_body = build_pay_to_msg(query_id, recipient, exit::refund, jetton0_wallet, refund_amount0, jetton1_wallet, refund_amount1, fee, tick_spacing);
    send_simple_message(0, router_address, refund_body, CARRY_REMAINING_GAS);

    ;; send batch tick
    int batch_tick_index = calculate_batch_tick_index(tick, tick_spacing);

    return ();
  }

  if(op == op::burn){

  }

  if(op == op::cb_burn){

  }

  if(op == op::swap){

  }

  if(op == op::cb_update_fee_growth_inside){

  }


  throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

(int, int) get_collected_fees() method_id {
  load_data();
  return (collected_protocol_fee0, collected_protocol_fee1);
}


slice get_lp_account_address(slice user_address, int tick_lower, int tick_upper) method_id {
  load_data();
  return calculate_user_lp_account_address(user_address, my_address(), tick_lower, tick_upper, lp_account_code);
}