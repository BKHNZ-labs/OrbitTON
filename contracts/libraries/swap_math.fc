#include "./full_math.fc";
#include "./sqrt_price_math.fc";

;; return uint160 sqrt_ratio_next_x96, uint256 amountIn, uint256 amountOut, uint256 fee_amount
(int, int, int, int) swap_math::compute_swap_step(
    int sqrt_ratio_current_x96, ;; uint160
    int sqrt_ratio_target_x96, ;; uint160
    int liquidity, ;; uint128
    int amount_remaining, ;; int256
    int fee_pips ;; uint24
) inline_ref {
    
    (int sqrt_ratio_next_x96, int amount_in, int amount_out, int fee_amount) = (0, 0, 0, 0);

    int zero_for_one = sqrt_ratio_current_x96 >= sqrt_ratio_target_x96;
    int exact_in = amount_remaining >= 0;

    if (exact_in) { ;; check if `exact_in` is true
        int amount_remaining_less_fee = full_math::mul_div(amount_remaining, 1000000 - fee_pips, 1000000); ;; cast int256 -> uint256: amount_remaining
        amount_in = zero_for_one
                ? sqrt_price_math::get_amount0_delta(sqrt_ratio_target_x96, sqrt_ratio_current_x96, liquidity, -1)
                : sqrt_price_math::get_amount1_delta(sqrt_ratio_current_x96, sqrt_ratio_target_x96, liquidity, -1);
        if (amount_remaining_less_fee >= amount_in) {
            sqrt_ratio_next_x96 = sqrt_ratio_target_x96;
        } else {
            sqrt_ratio_next_x96 = sqrt_price_math::get_next_sqrt_price_from_input(
                sqrt_ratio_current_x96,
                liquidity,
                amount_remaining_less_fee,
                zero_for_one
            );
        }
    } else {
        amount_out = zero_for_one
                ? sqrt_price_math::get_amount1_delta(sqrt_ratio_target_x96, sqrt_ratio_current_x96, liquidity, 0)
                : sqrt_price_math::get_amount0_delta(sqrt_ratio_current_x96, sqrt_ratio_target_x96, liquidity, 0);
        if (abs(amount_remaining) >= amount_out) { ;; cast int256 -> abs
            sqrt_ratio_next_x96 = sqrt_ratio_target_x96;
        } else {
            sqrt_ratio_next_x96 = sqrt_price_math::get_next_sqrt_price_from_output(
                sqrt_ratio_current_x96,
                liquidity,
                abs(amount_remaining), ;; cast int256 -> abs
                zero_for_one
            );
        }
    }

    int max = sqrt_ratio_target_x96 == sqrt_ratio_next_x96;
    ;; get the input/output amounts
    if (zero_for_one) {
        if (max) {
            if (exact_in) {
                amount_in = amount_in;
                amount_out = sqrt_price_math::get_amount1_delta(sqrt_ratio_next_x96, sqrt_ratio_current_x96, liquidity, 0);
            } else {
                amount_in = sqrt_price_math::get_amount0_delta(sqrt_ratio_next_x96, sqrt_ratio_current_x96, liquidity, -1);
                amount_out = amount_out;
            }
        } else {
            amount_in = sqrt_price_math::get_amount0_delta(sqrt_ratio_next_x96, sqrt_ratio_current_x96, liquidity, -1);
            amount_out = sqrt_price_math::get_amount1_delta(sqrt_ratio_next_x96, sqrt_ratio_current_x96, liquidity, 0);
        }
    } else {
        if (max) {
            if (exact_in) {
                amount_in = amount_in;
                amount_out = sqrt_price_math::get_amount0_delta(sqrt_ratio_current_x96, sqrt_ratio_next_x96, liquidity, 0);
            } else {
                amount_in = sqrt_price_math::get_amount1_delta(sqrt_ratio_current_x96, sqrt_ratio_next_x96, liquidity, -1);
                amount_out = amount_out;
            }
        } else {
            amount_in = sqrt_price_math::get_amount1_delta(sqrt_ratio_current_x96, sqrt_ratio_next_x96, liquidity, -1);
            amount_out = sqrt_price_math::get_amount0_delta(sqrt_ratio_current_x96, sqrt_ratio_next_x96, liquidity, 0);
        }
    }

    ;; cap the output amount to not exceed the remaining output amount
    if (exact_in == 0) {
        if (amount_out > abs(amount_remaining)) {
            amount_out = abs(amount_remaining); ;; cast int256 -> abs
        }
    }

    if (exact_in & (sqrt_ratio_next_x96 != sqrt_ratio_target_x96)) {
        ;; we didn't reach the target, so take the remainder of the maximum input as fee
        fee_amount = amount_remaining - amount_in; ;; cast int256 -> uint256
    } else {
        fee_amount = full_math::mul_div_rounding_up(amount_in, fee_pips, 1000000 - fee_pips);
    }

    return (sqrt_ratio_next_x96, amount_in, amount_out, fee_amount);
}