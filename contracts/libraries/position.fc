#include "./common.fc";
#include "../imports/stdlib.fc";
#include "./full_math.fc";
#include "./liquidity_math.fc";

const int error::position::NP = 0x2000;

int position::key(slice owner, int tick_lower, int tick_upper) inline_ref {
    int key = begin_cell()
        .store_slice(owner)
        .store_int(tick_lower, 24)
        .store_int(tick_upper, 24)
        .end_cell().cell_hash();
    return key;
}

slice position::get_position_by_key(cell self, int key) inline_ref {
    (slice data, int existed) = self.udict_get?(256, key);
    return data~load_ref().begin_parse();
}

(cell, ()) position::set(cell self, int key, cell data) inline_ref {
    self~udict_set(256, key, begin_cell().store_ref(data).end_cell().begin_parse());
    return (self, ());
}

(int, int, int, int, int) position::info(slice data) inline_ref {
    int liquidity = data~load_int(128);
    int fee_growth_inside_0_last_x128 = data~load_uint(256);
    int fee_growth_inside_1_last_x128 = data~load_uint(256);
    int tokens_owed_0 = data~load_uint(128);
    int tokens_owed_1 = data~load_uint(128);
    return (
        liquidity, 
        fee_growth_inside_0_last_x128, 
        fee_growth_inside_1_last_x128, 
        tokens_owed_0, 
        tokens_owed_1
    );
}

;; @notice Returns the Info struct of a position, given an owner and position boundaries
;; @param self The mapping containing all user positions
;; @param owner The address of the position owner
;; @param tick_lower The lower tick boundary of the position
;; @param tick_upper The upper tick boundary of the position
;; @return position The position info struct of the given owners' position
(int, int, int, int, int) position::get(cell self, slice owner, int tick_lower, int tick_upper) inline_ref {
    int key = position::key(owner, tick_lower, tick_upper);
    slice data = position::get_position_by_key(self, key);
    return position::info(data);
}

;; @notice Credits accumulated fees to a user's position
;; @param self The individual position to update
;; @param liquidity_delta The change in pool liquidity as a result of the position update
;; @param fee_growth_inside_0_x128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries
;; @param fee_growth_inside_1_x128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries
;; NOTE: @return The updated position -> need to set this in the mapping 
cell position::update(slice self, int liquidity_delta, int fee_growth_inside_0_x128, int fee_growth_inside_1_x128) inline_ref {
    (
        int liquidity, 
        int fee_growth_inside_0_last_x128, 
        int fee_growth_inside_1_last_x128, 
        int tokens_owed_0, 
        int tokens_owed_1
    ) = position::info(self);

    int liquidity_next = 0;
    if (liquidity_delta == 0) {
        throw_unless(error::position::NP, liquidity > 0);
        liquidity_next = liquidity;
    } else {
        liquidity_next = liquidity_math::add_delta(liquidity, liquidity_delta);
    }

    int tokens_owed_0_new = full_math::mul_div(fee_growth_inside_0_x128 - fee_growth_inside_0_last_x128, liquidity, fixed_point_128::q128);
    int tokens_owed_1_new = full_math::mul_div(fee_growth_inside_1_x128 - fee_growth_inside_1_last_x128, liquidity, fixed_point_128::q128);

    if (liquidity_delta != 0) {
        liquidity = liquidity_next;
    }
    fee_growth_inside_0_last_x128 = fee_growth_inside_0_x128;
    fee_growth_inside_1_last_x128 = fee_growth_inside_1_x128;
    if ((tokens_owed_0_new > 0) | (tokens_owed_1_new > 0)) {
        tokens_owed_0 += tokens_owed_0_new;
        tokens_owed_1 += tokens_owed_0_new;
    }

    return begin_cell()
        .store_int(liquidity, 128)
        .store_uint(fee_growth_inside_0_last_x128, 256)
        .store_uint(fee_growth_inside_1_last_x128, 256)
        .store_uint(tokens_owed_0, 128)
        .store_uint(tokens_owed_1, 128)
        .end_cell();
}


(int,int,int,int,int) position::simulate_update(
    int liquidity, 
    int fee_growth_inside_0_last_x128, 
    int fee_growth_inside_1_last_x128, 
    int tokens_owed_0, 
    int tokens_owed_1,
    int liquidity_delta,
    int fee_growth_inside_0_x128,
    int fee_growth_inside_1_x128) 
    inline_ref
{
    int liquidity_next = 0;
    if (liquidity_delta == 0) {
        throw_unless(error::position::NP, liquidity > 0);
        liquidity_next = liquidity;
    } else {
        liquidity_next = liquidity_math::add_delta(liquidity, liquidity_delta);
    }

    int tokens_owed_0_new = full_math::mul_div(fee_growth_inside_0_x128 - fee_growth_inside_0_last_x128, liquidity, fixed_point_128::q128);
    int tokens_owed_1_new = full_math::mul_div(fee_growth_inside_1_x128 - fee_growth_inside_1_last_x128, liquidity, fixed_point_128::q128);

    if (liquidity_delta != 0) {
        liquidity = liquidity_next;
    }
    fee_growth_inside_0_last_x128 = fee_growth_inside_0_x128;
    fee_growth_inside_1_last_x128 = fee_growth_inside_1_x128;
    if ((tokens_owed_0_new > 0) | (tokens_owed_1_new > 0)) {
        tokens_owed_0 += tokens_owed_0_new;
        tokens_owed_1 += tokens_owed_0_new;
    }

    return (liquidity, fee_growth_inside_0_last_x128, fee_growth_inside_1_last_x128, tokens_owed_0, tokens_owed_1);
}
