const int error::tick_math::T = 0x1000;
const int error::tick_math::R = 0x1001;

const int max::uint256 = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;
const int tick_math::MIN_TICK = -887272;
const int tick_math::MAX_TICK = 887272;
const int tick_math::MIN_SQRT_RATIO = 4295128739;
const int tick_math::MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;

int tick_math::get_sqrt_ratio_at_tick(int tick) {
    int abs_tick  = (tick < 0) ? - tick : tick;
    
    throw_unless(error::tick_math::T, abs_tick <= tick_math::MAX_TICK);
    int ratio = (abs_tick & 0x1)  != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;

    if (abs_tick & 0x2 != 0) {
        ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;
    }
    if (abs_tick & 0x4 != 0) {
        ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;
    }
    if (abs_tick & 0x8 != 0) {
        ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;
    }
    if (abs_tick & 0x10 != 0) {
        ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;
    }
    if (abs_tick & 0x20 != 0) {
        ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;
    }
    if (abs_tick & 0x40 != 0) {
        ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;
    }
    if (abs_tick & 0x80 != 0) {
        ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;
    }
    if (abs_tick & 0x100 != 0) {
        ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;
    }
    if (abs_tick & 0x200 != 0) {
        ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;
    }
    if (abs_tick & 0x400 != 0) {
        ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;
    }
    if (abs_tick & 0x800 != 0) {
        ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;
    }
    if (abs_tick & 0x1000 != 0) {
        ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;
    }
    if (abs_tick & 0x2000 != 0) {
        ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;
    }
    if (abs_tick & 0x4000 != 0) {
        ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;
    }
    if (abs_tick & 0x8000 != 0) {
        ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;
    }
    if (abs_tick & 0x10000 != 0) {
        ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;
    }
    if (abs_tick & 0x20000 != 0) {
        ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;
    }
    if (abs_tick & 0x40000 != 0) {
        ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;
    }
    if (abs_tick & 0x80000 != 0) {
        ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;
    }

    if (tick > 0) {
        ratio = max::uint256 / ratio;
    }

    ;; // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.
    ;; // we then downcast because we know the result always fits within 160 bits due to our tick input constraint
    ;; // we round up in the division so getTickAtSqrtRatio of the output price is always consistent
    int sqrtPriceX96 = (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1);
    return sqrtPriceX96;
}

int tick_math::get_tick_at_sqrt_ratio(int sqrtPriceX96){
    throw_unless(error::tick_math::R, (sqrtPriceX96 >= tick_math::MIN_SQRT_RATIO) & (sqrtPriceX96 < tick_math::MAX_SQRT_RATIO));
    int ratio = sqrtPriceX96 << 32;
    int r = ratio;
    int msb = 0;

    if (r > 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {
        msb += 128;
        r >>= 128;
    }
    if (r > 0xFFFFFFFFFFFFFFFF) {
        msb += 64;
        r >>= 64;
    }
    if (r > 0xFFFFFFFF) {
        msb += 32;
        r >>= 32;
    }
    if (r > 0xFFFF) {
        msb += 16;
        r >>= 16;
    }
    if (r > 0xFF) {
        msb += 8;
        r >>= 8;
    }
    if (r > 0xF) {
        msb += 4;
        r >>= 4;
    }
    if (r > 0x3) {
        msb += 2;
        r >>= 2;
    }
    if (r > 0x1) {
        msb += 1;
    }

    ;; Normalize r based on the msb value
    if (msb >= 128) {
        r = ratio >> (msb - 127);
    } else {
        r = ratio << (127 - msb);
    }

    ;; Calculate log_2 based on msb
    int log_2 = (msb - 128) << 64;

    ;; ;; Perform the binary search to calculate log_2
    int i = 0;
    while(i < 14){
        r = (r * r) >> 127;
        if (r >= 0x100000000000000000000000000000000) {
            log_2 |= 1 << (63 - i);
            r >>= 1;
        }
        i += 1;
    }


    ;; Calculate log_sqrt10001 using the precomputed constant
    int log_sqrt10001 = log_2 * 255738958999603826347141; ;; 128.128 number

    ;; Calculate tickLow and tickHi
    int tickLow = (log_sqrt10001 - 3402992956809132418596140100660247210) >> 128;
    int tickHi = (log_sqrt10001 + 291339464771989622907027621153398088495) >> 128;

    ;; Determine the final tick value
    int tick = (tickLow == tickHi) ? tickLow : (tick_math::get_sqrt_ratio_at_tick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow);
    
    return tick;
}

