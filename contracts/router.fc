#include "imports/stdlib.fc";
#include "router/opcodes.fc";
#include "common/messages.fc";
#include "common/address.fc";
#include "common/errors.fc";

global int is_locked;
global int pool_seqno;
global slice admin_address;
global cell pool_code;
global cell batch_tick_code;
global cell position_code;
global cell lp_account_code;

;; load_data populates storage variables using stored data
() load_data() impure {
  var ds = get_data().begin_parse();
  is_locked = ds~load_int(8);
  pool_seqno = ds~load_int(64);
  admin_address = ds~load_msg_addr();
  slice code_storage = ds~load_ref().begin_parse();
  pool_code = code_storage~load_ref();
  batch_tick_code = code_storage~load_ref();
  position_code = code_storage~load_ref();
  lp_account_code = code_storage~load_ref();
  ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure inline_ref {
  set_data(
    begin_cell()
      .store_int(is_locked, 8)
      .store_int(pool_seqno, 64)
      .store_slice(admin_address)
      .store_ref(
      begin_cell()
              .store_ref(pool_code)
              .store_ref(batch_tick_code)
              .store_ref(position_code)
              .store_ref(lp_account_code)
        .end_cell())
    .end_cell()
  );
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore all empty messages        
    return ();
  }

  slice cs = in_msg_full.begin_parse();
   
  int flags = cs~load_uint(4);

  if (flags & 1) { ;; ignore all bounced messages
    return ();
  }

  load_data(); ;; here we populate the storage variables

  slice sender_address = cs~load_msg_addr();
  int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
  int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

  if (op == op::set_admin_address) {
    throw_if(error::unauthorized, compare_address(sender_address, admin_address) != -1);
    slice new_address = in_msg_body~load_msg_addr();
    admin_address = new_address;
    save_data();
    return ();
  }

  throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

slice get_admin_address() method_id {
  load_data();
  return admin_address;
}

int get_is_locked() method_id {
  load_data();
  return is_locked;
}

cell get_pool_code() method_id {
  load_data();
  return pool_code;
}

cell get_batch_tick_code() method_id {
  load_data();
  return batch_tick_code;
}

cell get_position_code() method_id {
  load_data();
  return position_code;
}

cell get_lp_account_code() method_id {
  load_data();
  return lp_account_code;
}

