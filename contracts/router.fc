#include "imports/stdlib.fc";
#include "common/utils.fc";
#include "common/messages.fc";
#include "common/address.fc";
#include "common/errors.fc";
#include "common/op_codes.fc";
#include "router/storage.fc";
#include "router/opcodes.fc";
#include "router/utils.fc";
#include "pool/opcodes.fc";

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore all empty messages        
    return ();
  }

  slice cs = in_msg_full.begin_parse();
   
  int flags = cs~load_uint(4);

  if (flags & 1) { ;; ignore all bounced messages
    return ();
  }

  load_data(); ;; here we populate the storage variables

  slice sender_address = cs~load_msg_addr();
  int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
  int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

  if (op == op::jetton_transfer_notification()) {
    (int jetton_amount, slice from_user) = (in_msg_body~load_coins(), in_msg_body~load_msg_addr());
    cell ref_cs = in_msg_body~load_ref();
    slice ref_ds = ref_cs.begin_parse();
    throw_unless(error:not_enough_amount, jetton_amount > 0);
    (int forward_opcode, slice jetton1_wallet) = (ref_ds~load_uint(32), ref_ds~load_msg_addr());

    if (forward_opcode == op::mint) {
      int tick_lower = ref_ds~load_int(24);
      int tick_upper = ref_ds~load_int(24);
      int fee = ref_ds~load_uint(24);
      int tick_spacing = ref_ds~load_int(24);
      int liquidity_delta = ref_ds~load_int(128);
      slice jetton0_wallet = sender_address;
      (cell state_init, slice pool_address) = get_pool_state_init_and_address(jetton0_wallet, jetton1_wallet, fee, tick_spacing);
      builder mint_msg = begin_cell()
                    .store_uint(op::mint, 32)
                    .store_uint(query_id, 64);
      builder body_builder = begin_cell();
      if (slice_hash(jetton0_wallet) < slice_hash(jetton1_wallet)) {
        body_builder = body_builder.store_coins(jetton_amount);
        body_builder = body_builder.store_coins(0);
      } else {
        body_builder = body_builder.store_coins(0);
        body_builder = body_builder.store_coins(jetton_amount);
      }
      body_builder = body_builder                    
                  .store_int(tick_lower, 24)
                  .store_int(tick_upper, 24)
                  .store_int(liquidity_delta, 128)
                  .store_slice(from_user);
      mint_msg = mint_msg.store_ref(body_builder.end_cell());
      send_message_with_stateinit(0, pool_address, state_init, mint_msg.end_cell(), CARRY_REMAINING_GAS);
    }

    if (forward_opcode == op::swap) {;
      int fee = ref_ds~load_uint(24);
      int tick_spacing = ref_ds~load_int(24);
      int zero_for_one = ref_ds~load_int(2);
      int sqrt_price_limit = ref_ds~load_uint(160);
      (cell state_init, slice pool_address) = get_pool_state_init_and_address(sender_address, jetton1_wallet, fee, tick_spacing);
      builder msg = begin_cell()
                    .store_uint(op::swap, 32)
                    .store_uint(query_id, 64)
                    .store_int(jetton_amount, 256)
                    .store_int(zero_for_one, 2)
                    .store_uint(sqrt_price_limit, 160)
                    .store_slice(from_user);
      send_simple_message(0, pool_address, msg.end_cell(), CARRY_REMAINING_GAS);
      return ();
    }

    if (forward_opcode == op::burn) {
    }
    return ();  
  }

  if (op == op::pay_to) {
    slice recipient = in_msg_body~load_msg_addr();
    int exit_code = in_msg_body~load_uint(32);
    slice ds = in_msg_body~load_ref().begin_parse();
    slice token0_address = ds~load_msg_addr();
    int token0_amount = ds~load_coins();
    slice token1_address = ds~load_msg_addr();
    int token1_amount = ds~load_coins();
    int fee = ds~load_uint(24);
    int tick_spacing = ds~load_int(24);
    (cell state_init, slice pool_address) = get_pool_state_init_and_address(token0_address, token1_address, fee, tick_spacing);
    throw_unless(error::unauthorized, compare_address(sender_address, pool_address));
    int gas_value = (token0_amount > 0) & (token1_amount > 0) ? msg_value / 2 : msg_value;
    if (token0_amount > 0) {
      var body0 = create_simple_transfer_body(query_id, 0, token0_amount, recipient);
      body0 = body0.store_uint(exit_code, 32); ;; append exit code
      send_simple_message(gas_value, token0_address, body0.end_cell(), NORMAL + IGNORE_ERRORS);
    }
    if (token1_amount > 0) {
      var body1 = create_simple_transfer_body(query_id, 0, token1_amount, recipient);
      body1 = body1.store_uint(exit_code, 32); ;; append exit code
      send_simple_message(gas_value, token1_address, body1.end_cell(), NORMAL + IGNORE_ERRORS);
    }
    return ();
  }

  if (op == op::create_pool) {
    slice token0_address = in_msg_body~load_msg_addr();
    slice token1_address = in_msg_body~load_msg_addr();
    int fee = in_msg_body~load_uint(24);
    int tick_spacing = in_msg_body~load_int(24);
    int sqrt_price_x96 = in_msg_body~load_uint(160);
    (cell state_init, slice pool_address) = get_pool_state_init_and_address(token0_address, token1_address, fee, tick_spacing);
    builder msg = begin_cell()
                    .store_uint(op::initialize, 32)
                    .store_uint(query_id, 64)
                    .store_uint(sqrt_price_x96, 160)
                    .store_slice(sender_address);
    send_message_with_stateinit(0, pool_address, state_init, msg.end_cell(), CARRY_REMAINING_GAS);
    storage::pool_seqno = storage::pool_seqno + 1;
    save_data();
    return ();
  }
  
  if (op == op::cb_create_pool) {
    slice token0_address = in_msg_body~load_msg_addr();
    slice token1_address = in_msg_body~load_msg_addr();
    int fee = in_msg_body~load_uint(24);
    int tick_spacing = in_msg_body~load_int(24);
    slice response_address = in_msg_body~load_msg_addr();
    (cell state_init, slice pool_address) = get_pool_state_init_and_address(token0_address, token1_address, fee, tick_spacing);
    if (compare_address(sender_address, pool_address)) {
      storage::pool_seqno = storage::pool_seqno + 1;
      ;; emit event
      cell data = begin_cell()
                    .store_slice(sender_address)
                    .store_slice(token0_address)
                    .store_slice(token1_address)
                    .store_uint(fee, 24)
                    .store_int(tick_spacing, 24)
                    .end_cell();
      emit_log_simple(storage::pool_seqno - 1, data, query_id);
      save_data();
    }
    send_empty_message(0, response_address, CARRY_REMAINING_GAS + IGNORE_ERRORS);
    return ();
  }

  ;; [MONITOR]
  if (op == op::set_admin_address) {
    throw_if(error::unauthorized, compare_address(sender_address, storage::admin_address) != -1);
    slice new_address = in_msg_body~load_msg_addr();
    storage::admin_address = new_address;
    save_data();
    return ();
  }

  if (op == op::update_lock_state) {
    throw_if(error::unauthorized, compare_address(sender_address, storage::admin_address) != -1);
    storage::is_locked = in_msg_body~load_int(8);
    save_data();
    return ();
  }

  if (op == op::update_pool_code) {
    throw_if(error::unauthorized, compare_address(sender_address, storage::admin_address) != -1);
    storage::pool_code = in_msg_body~load_ref();
    save_data();
    return ();
  }

  if (op == op::update_batch_tick_code) {
    throw_if(error::unauthorized, compare_address(sender_address, storage::admin_address) != -1);
    storage::batch_tick_code = in_msg_body~load_ref();
    save_data();
    return ();
  }

  if (op == op::update_position_code) {
    throw_if(error::unauthorized, compare_address(sender_address, storage::admin_address) != -1);
    storage::position_code = in_msg_body~load_ref();
    save_data();
    return ();
  }

  if (op == op::update_lp_account_code) {
    throw_if(error::unauthorized, compare_address(sender_address, storage::admin_address) != -1);
    storage::lp_account_code = in_msg_body~load_ref();
    save_data();
    return ();
  }

  throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

slice get_admin_address() method_id {
  load_data();
  return storage::admin_address;
}

int get_is_locked() method_id {
  load_data();
  return storage::is_locked;
}

cell get_pool_code() method_id {
  load_data();
  return storage::pool_code;
}

cell get_batch_tick_code() method_id {
  load_data();
  return storage::batch_tick_code;
}

cell get_position_code() method_id {
  load_data();
  return storage::position_code;
}

cell get_lp_account_code() method_id {
  load_data();
  return storage::lp_account_code;
}

slice get_pool_address(slice token0_address, slice token1_address, int fee, int tick_spacing) method_id {
  load_data();
  (_, slice pool_address) = get_pool_state_init_and_address(token0_address,token1_address,fee,tick_spacing);
  return pool_address;
}

