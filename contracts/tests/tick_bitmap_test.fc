#include "../imports/stdlib.fc";
#include "../libraries/tick_bitmap.fc";

const op::flip_tick = "op::flip_tick"c;
global cell bitmap;

;; load_data populates storage variables using stored data
() load_data() impure {
  var ds = get_data().begin_parse();
  bitmap = ds~load_dict();
  ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
  set_data(
    begin_cell()
    .store_dict(bitmap)
    .end_cell()
  );
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
    return ();
  }

  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  if (flags & 1) { ;; ignore all bounced messages
    return ();
  }

  load_data(); ;; here we populate the storage variables

  slice sender_address = cs~load_msg_addr();
  int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
  int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

  if (op == op::flip_tick) {
    int tick = in_msg_body~load_int(24);
    bitmap~tick_bitmap::flip_tick(tick, 1);
    save_data();
    return ();
  }

  load_data(); ;; here we populate the storage variables
  throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

int get_is_initialized(int tick) method_id {
  load_data();
  (int next, int initialized) = bitmap.tick_bitmap::next_initialized_tick_within_one_word(tick, 1, -1);
  return next == tick ? initialized : 0;
}

(int, int) get_next_initialized_tick_within_one_word(int tick, int lte) method_id {
  load_data();
  return bitmap.tick_bitmap::next_initialized_tick_within_one_word(tick, 1, lte);
}
