#include "../imports/stdlib.fc";
#include "../libraries/full_math.fc";

;; load_data populates storage variables using stored data
() load_data() impure {
  var ds = get_data().begin_parse();
  ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
  set_data(
    begin_cell()
    .end_cell()
  );
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
    return ();
  }

  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  if (flags & 1) { ;; ignore all bounced messages
    return ();
  }

  load_data(); ;; here we populate the storage variables
  throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

int get_mul_div(int a, int b, int denominator) method_id {
  return full_math::mul_div(a, b, denominator);
}

int get_mul_div_rounding_up(int a, int b, int denominator) method_id {
  return full_math::mul_div_rounding_up(a, b, denominator);
}
