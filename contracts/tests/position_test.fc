#include "../imports/stdlib.fc";
#include "../libraries/position.fc";

const op::position_update = "op::position_update"c;
global cell positions;

;; load_data populates storage variables using stored data
() load_data() impure {
    var ds = get_data().begin_parse();
    positions = ds~load_dict();
    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
    .store_dict(positions)
    .end_cell()
    );
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    load_data(); ;; here we populate the storage variables

    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    if (op == op::position_update) {
        slice owner = in_msg_body~load_bits(160);
        int tick_lower = in_msg_body~load_int(24);
        int tick_upper = in_msg_body~load_int(24);
        int liquidity_delta = in_msg_body~load_int(128);
        int fee_growth_inside_0_x128 = in_msg_body~load_int(256);
        int fee_growth_inside_1_x128 = in_msg_body~load_int(128);

        positions~position::update(
            owner,
            tick_lower,
            tick_upper,
            liquidity_delta,
            fee_growth_inside_0_x128,
            fee_growth_inside_1_x128
        );
    
        save_data();
        return ();
    }

    load_data(); ;; here we populate the storage variables
    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

(int, int, int, int, int) get_position(slice owner, int tick_lower, int tick_upper) method_id {
    load_data();
    return positions.position::get(owner, tick_lower, tick_upper);
}