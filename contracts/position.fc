#include "imports/stdlib.fc";
#include "position/storage.fc";
#include "position/opcodes.fc";
#include "pool/opcodes.fc";
#include "libraries/position.fc";
#include "common/messages.fc";
#include "common/address.fc";
#include "common/errors.fc";

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore all empty messages        
    return ();
  }

  slice cs = in_msg_full.begin_parse();
   
  int flags = cs~load_uint(4);

  if (flags & 1) { ;; ignore all bounced messages
    return ();
  }

  load_data(); ;; here we populate the storage variables

  slice sender_address = cs~load_msg_addr();
  int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
  int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

  if (op == op::mint_position) {
    throw_unless(error::unauthorized, compare_address(storage::pool_address, sender_address));
    int liquidity_delta = in_msg_body~load_int(128);
    int fee_growth_inside_0_x128 = in_msg_body~load_uint(256);
    int fee_growth_inside_1_x128 = in_msg_body~load_uint(256);
    (int liquidity, int fee_growth_inside_0_last_x128, int fee_growth_inside_1_last_x128, int tokens_owed_0, int tokens_owed_1) = position::simulate_update(
      storage::liquidity, 
      storage::fee_growth_inside0_last_x128, storage::fee_growth_inside1_last_x128, 
      storage::token_owed0, 
      storage::token_owed1, 
      liquidity_delta,
      fee_growth_inside_0_x128,
      fee_growth_inside_1_x128);
    storage::liquidity = liquidity;
    storage::fee_growth_inside0_last_x128 = fee_growth_inside_0_last_x128;
    storage::fee_growth_inside1_last_x128 = fee_growth_inside_1_last_x128;
    storage::token_owed0 = tokens_owed_0;
    storage::token_owed1 = tokens_owed_1;

    builder msg = begin_cell()
                    .store_uint(op::cb_mint_position, 32)
                    .store_uint(query_id, 64)
                    .store_ref(begin_cell()
                      .store_int(storage::tick_lower, 24)
                      .store_int(storage::tick_upper, 24)
                      .store_uint(storage::liquidity, 128)
                      .store_uint(fee_growth_inside_0_last_x128, 256)
                      .store_uint(fee_growth_inside_1_last_x128, 256)
                      .end_cell())
                    .store_ref(begin_cell()
                      .store_uint(tokens_owed_0, 128)
                      .store_uint(tokens_owed_1, 128)
                      .store_slice(storage::owner_address)
                      .end_cell());
                    
    send_simple_message(0, storage::pool_address, msg.end_cell(), CARRY_REMAINING_GAS);
    save_data();
    return ();
  }

  if (op == op::burn_position) {
    throw_unless(error::unauthorized, compare_address(storage::pool_address, sender_address));
    int liquidity_delta = in_msg_body~load_int(128);
    int fee_growth_inside_0_x128 = in_msg_body~load_uint(256);
    int fee_growth_inside_1_x128 = in_msg_body~load_uint(256);
    slice ds = in_msg_body~load_ref().begin_parse();
    int amount0 = ds~load_int(256);
    int amount1 = ds~load_int(256);
    (int liquidity, int fee_growth_inside_0_last_x128, int fee_growth_inside_1_last_x128, int tokens_owed_0, int tokens_owed_1) = position::simulate_update(
      storage::liquidity, 
      storage::fee_growth_inside0_last_x128, storage::fee_growth_inside1_last_x128, 
      storage::token_owed0, 
      storage::token_owed1, 
      liquidity_delta,
      fee_growth_inside_0_x128,
      fee_growth_inside_1_x128);
    storage::liquidity = liquidity;
    storage::fee_growth_inside0_last_x128 = fee_growth_inside_0_last_x128;
    storage::fee_growth_inside1_last_x128 = fee_growth_inside_1_last_x128;
    storage::token_owed0 = tokens_owed_0;
    storage::token_owed1 = tokens_owed_1;
    if ((amount0 > 0) | (amount1 > 0)) {
      storage::token_owed0 = storage::token_owed0 + amount0;
      storage::token_owed1 = storage::token_owed1 + amount1;
    }
    builder msg = begin_cell()
                    .store_uint(op::cb_burn, 32)
                    .store_uint(query_id, 64)
                    .store_int(amount0, 256)
                    .store_int(amount1, 256)
                    .store_slice(storage::owner_address);
    send_simple_message(0, storage::pool_address, msg.end_cell(), CARRY_REMAINING_GAS);
    save_data();
    return ();
  }

  throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}
